using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;

namespace Exemc_
{
    internal class Program
    {
        public class Login
        {
            private string Log { get; set; }
            private string Password { get; set; }
            private string Date { get; set; }

            static public string lpath = "C:\\Users\\USR\\Desktop\\login.txt";
            static public string passpath = "C:\\Users\\USR\\Desktop\\password.txt";
            static public string datepath = "C:\\Users\\USR\\Desktop\\date.txt";
            static public string userpath = "C:\\Users\\USR\\Desktop\\user.txt";
            static public string history = "C:\\Viktorina\\История.txt";
            static public string geography = "C:\\Viktorina\\География.txt";
            static public string biology = "C:\\Viktorina\\Биология.txt";
            static public string results = "C:\\Users\\USR\\Desktop\\results.txt";


            public void GetLogin()
            {
                Console.WriteLine("Введите логин: ");
                string l = Console.ReadLine();

                Console.WriteLine("Введите пароль: ");
                string pass = Console.ReadLine();

                Console.WriteLine("Введите дату рождения: ");
                string d = Console.ReadLine();

                using (StreamWriter writer = new StreamWriter(lpath, true))
                {
                    writer.WriteLine(l);
                }
                using (StreamWriter writer = new StreamWriter(passpath, true))
                {
                    writer.WriteLine(pass);
                }
                using (StreamWriter writer = new StreamWriter(datepath, true))
                {
                    writer.WriteLine(d);
                }

                Console.WriteLine("Регистрация завершена!");
            }

            public bool CheckLogin(out int userIndex)
            {
                Console.WriteLine("Введите логин: ");
                string l = Console.ReadLine();
                Console.WriteLine("Введите пароль: ");
                string pass = Console.ReadLine();

                string[] logs = File.ReadAllLines(lpath);
                string[] passwords = File.ReadAllLines(passpath);

                for (int i = 0; i < logs.Length; i++)
                {
                    if (logs[i] == l && passwords[i] == pass)
                    {
                        userIndex = i;
                        return true;
                    }
                }

                userIndex = -1;
                return false;
            }

            public bool CheckUserName(out string userName)
            {
                Console.WriteLine("Введите повторно логин: ");
                string login = Console.ReadLine();

                Dictionary<string, string> userLogins = new Dictionary<string, string>();

                if (File.Exists(userpath))
                {
                    string[] lines = File.ReadAllLines(userpath);
                    foreach (var line in lines)
                    {
                        var parts = line.Split(',');
                        if (parts.Length == 2)
                        {
                            userLogins[parts[0]] = parts[1];
                        }
                    }
                }

                if (userLogins.ContainsKey(login))
                {
                    userName = userLogins[login];
                    Console.WriteLine($"Добро пожаловать, {userName}!");
                    Console.ReadLine();
                    return true;

                }
                else
                {
                    Console.WriteLine("Введите ваше имя: ");
                    string user = Console.ReadLine();

                    userLogins[login] = user;
                    using (StreamWriter writer = new StreamWriter(userpath, true))
                    {
                        writer.WriteLine($"{login},{user}");
                    }
                    userName = user;
                    Console.ReadLine();
                    return false;
                }
            }


            public void ChangePassword(int userIndex)
            {
                Console.WriteLine("Введите новый пароль: ");
                string newPassword = Console.ReadLine();

                string[] passwords = File.ReadAllLines(passpath);
                passwords[userIndex] = newPassword;

                File.WriteAllLines(passpath, passwords);
                Console.WriteLine("Пароль успешно изменен!");
                Console.ReadLine();
            }

            public void ChangeDate(int userIndex)
            {
                Console.WriteLine("Введите новую дату: ");
                string newDate = Console.ReadLine();

                string[] dates = File.ReadAllLines(datepath);
                dates[userIndex] = newDate;

                File.WriteAllLines(datepath, dates);
                Console.WriteLine("Дата успешно изменена!");
                Console.ReadLine();
            }
        }
        public class Question
        {
            public string Text { get; set; }
            public List<string> Options { get; }
            public int CorrectIndex { get; set; }

            public Question(string text, List<string> options, int correctIndex)
            {
                Text = text;
                Options = options;
                CorrectIndex = correctIndex;
            }

            public void Display()
            {
                Console.WriteLine(Text);
                for (int i = 0; i < Options.Count; i++)
                {
                    Console.WriteLine($"{i + 1}) {Options[i]}");
                }
            }

            public bool IsCorrect(int answerIndex)
            {
                return answerIndex == CorrectIndex;
            }
        }

        public class Viktorina
        {
            private string resultPath = Login.results;
            public List<Question> Questions { get; private set; }

            public Viktorina()
            {
                Questions = new List<Question>();
            }

            public void CreateQuiz(string filepath)
            {
                Questions = new List<Question>();

                while (true)
                {
                    Console.WriteLine("Введите текст вопроса (или 'exit' для завершения):");
                    string questionText = Console.ReadLine();
                    if (questionText.ToLower() == "exit") break;

                    var options = new List<string>();
                    int correctAnswerIndex = -1;

                    for (int i = 0; i < 4; i++)
                    {
                        Console.WriteLine($"Введите вариант ответа {i + 1} (или 'exit' для завершения):");
                        string option = Console.ReadLine();
                        if (option.ToLower() == "exit") break;
                        options.Add(option);
                    }

                    Console.WriteLine("Введите номер правильного ответа (1-4):");
                    correctAnswerIndex = int.Parse(Console.ReadLine()) - 1;

                    if (questionText != null && options.Count > 0)
                    {
                        Questions.Add(new Question(questionText, options, correctAnswerIndex));
                    }
                }

                SaveQuiz(filepath);
            }

            public void SaveQuiz(string filepath)
            {
                using (StreamWriter writer = new StreamWriter(filepath))
                {
                    foreach (var question in Questions)
                    {
                        writer.WriteLine(question.Text);
                        for (int i = 0; i < question.Options.Count; i++)
                        {
                            string option = question.Options[i];
                            if (i == question.CorrectIndex)
                                writer.WriteLine($"{i + 1}) {option} +");
                            else
                                writer.WriteLine($"{i + 1}) {option}");
                        }
                    }
                }

                Console.WriteLine("Викторина успешно сохранена!");
            }

            public void EditQuiz(string filepath)
            {
                LoadQuiz(filepath);

                while (true)
                {
                    Console.WriteLine("Введите номер вопроса для редактирования (или 'exit' для завершения):");
                    string input = Console.ReadLine();
                    if (input.ToLower() == "exit") break;

                    int questionIndex = int.Parse(input) - 1;
                    if (questionIndex < 0 || questionIndex >= Questions.Count)
                    {
                        Console.WriteLine("Некорректный номер вопроса.");
                        continue;
                    }

                    var question = Questions[questionIndex];

                    Console.WriteLine($"Текущий текст вопроса: {question.Text}");
                    Console.WriteLine("Введите новый текст вопроса (или оставьте пустым для сохранения текущего):");
                    string newText = Console.ReadLine();
                    if (!string.IsNullOrEmpty(newText)) question.Text = newText;

                    for (int i = 0; i < question.Options.Count; i++)
                    {
                        Console.WriteLine($"Текущий вариант {i + 1}: {question.Options[i]}");
                        Console.WriteLine("Введите новый вариант (или оставьте пустым для сохранения текущего):");
                        string newOption = Console.ReadLine();
                        if (!string.IsNullOrEmpty(newOption)) question.Options[i] = newOption;
                    }

                    Console.WriteLine($"Текущий номер правильного ответа: {question.CorrectIndex + 1}");
                    Console.WriteLine("Введите новый номер правильного ответа (или оставьте пустым для сохранения текущего):");
                    string newCorrectIndex = Console.ReadLine();
                    if (!string.IsNullOrEmpty(newCorrectIndex)) question.CorrectIndex = int.Parse(newCorrectIndex) - 1;
                }

                SaveQuiz(filepath);
            }

            public void LoadQuiz(string filepath)
            {
                var lines = File.ReadAllLines(filepath);
                string questionText = null;
                var options = new List<string>();
                int correctAnswerIndex = -1;

                foreach (var line in lines)
                {
                    if (line.Contains(")"))
                    {
                        if (line.EndsWith("+"))
                        {
                            correctAnswerIndex = options.Count;
                            options.Add(line.TrimEnd('+').Substring(2).Trim());
                        }
                        else
                        {
                            options.Add(line.Substring(2).Trim());
                        }
                    }
                    else
                    {
                        if (questionText != null && options.Count > 0)
                        {
                            Questions.Add(new Question(questionText, options, correctAnswerIndex));
                        }

                        questionText = line;
                        options = new List<string>();
                    }
                }

                if (questionText != null && options.Count > 0)
                {
                    Questions.Add(new Question(questionText, options, correctAnswerIndex));
                }

                Console.WriteLine($"Загружено вопросов: {Questions.Count}");
            }

            public void Start(string userName)
            {
                int correctAnswers = 0;

                foreach (var question in Questions)
                {
                    question.Display();
                    Console.WriteLine("Введите номер правильного ответа: ");
                    string answerInput = Console.ReadLine();

                    if (int.TryParse(answerInput, out int answerIndex))
                    {
                        if (answerIndex > 0 && answerIndex <= question.Options.Count)
                        {
                            Console.WriteLine($"Ответ пользователя: {answerIndex}, Правильный ответ: {question.CorrectIndex + 1}");

                            if (question.IsCorrect(answerIndex - 1))
                            {
                                correctAnswers++;
                            }
                        }
                    }
                    else
                    {
                        Console.WriteLine("Некорректный формат ответа. Пожалуйста, введите номер ответа, например: 1, 2, 3 и т.д.");
                    }
                }

                Console.WriteLine($"Вы ответили правильно на {correctAnswers} из {Questions.Count} вопросов.");
                SaveResult(userName, correctAnswers);
                Console.ReadLine();
            }

            public void SaveResult(string userName, int correctAnswers)
            {
                using (StreamWriter writer = new StreamWriter(resultPath, true))
                {
                    writer.WriteLine($"{userName},{correctAnswers},{DateTime.Now}");
                }
            }
        }
        private class Result
        {
            private readonly string resultPath = Login.results;
            private string currentUserName;

            public Result(string userName)
            {
                currentUserName = userName;
            }

            public void MainResult()
            {
                Console.WriteLine("Ваши прошлые результаты:");

                string[] results = File.ReadAllLines(resultPath);

                var parsedResults = results.Select(res =>
                {
                    var parts = res.Split(',');

                    if (parts.Length < 3)
                    {
                        Console.WriteLine($"Некорректная строка в файле результатов: {res}");
                        return null;
                    }

                    string userName = parts[0];
                    if (!int.TryParse(parts[1], out int correctAnswers))
                    {
                        Console.WriteLine($"Некорректное количество правильных ответов в строке: {res}");
                        return null;
                    }

                    if (!DateTime.TryParse(parts[2], out DateTime dateTime))
                    {
                        Console.WriteLine($"Некорректная дата в строке: {res}");
                        return null;
                    }

                    return new { userName, correctAnswers, dateTime };
                }).Where(result => result != null).ToList();

                var userResults = parsedResults
                    .Where(res => res.userName == currentUserName)
                    .OrderByDescending(res => res.correctAnswers)
                    .ThenByDescending(res => res.dateTime)
                    .ToList();

                if (!userResults.Any())
                {
                    Console.WriteLine("Нет результатов для данного пользователя.");
                }
                else
                {
                    foreach (var res in userResults)
                    {
                        Console.WriteLine($"Пользователь: {res.userName}, Правильных ответов: {res.correctAnswers}, Дата: {res.dateTime}");
                    }
                }

                Console.ReadLine();
            }
        }

        public class Top
        {
            private readonly string resultPath = Login.results;

            public void Top20()
            {
                string[] results = File.ReadAllLines(resultPath);

                var parsedResults = results.Select(res =>
                {
                    var parts = res.Split(',');

                    if (parts.Length < 3)
                    {
                        Console.WriteLine($"Некорректная строка в файле результатов: {res}");
                        return null;
                    }

                    string username = parts[0];
                    if (!int.TryParse(parts[1], out int correctAnswers))
                    {
                        Console.WriteLine($"Некорректное количество правильных ответов в строке: {res}");
                        return null;
                    }

                    if (!DateTime.TryParse(parts[2], out DateTime dateTime))
                    {
                        Console.WriteLine($"Некорректная дата в строке: {res}");
                        return null;
                    }

                    return new { username, correctAnswers, dateTime };
                }).Where(result => result != null).ToList();

                var sortedResults = parsedResults
                    .OrderByDescending(res => res.correctAnswers)
                    .ThenByDescending(res => res.dateTime)
                    .Take(20)
                    .ToList();

                Console.WriteLine("Топ-20 игроков:");
                int rank = 1;
                foreach (var result in sortedResults)
                {
                    Console.WriteLine($"{rank}) Пользователь: {result.username}, Правильных ответов: {result.correctAnswers}, Дата: {result.dateTime}");
                    rank++;
                }
            }

            public int Plase(string userName)
            {
                string[] results = File.ReadAllLines(resultPath);

                var parsedResults = results.Select(res =>
                {
                    var parts = res.Split(',');

                    if (parts.Length < 3)
                    {
                        Console.WriteLine($"Некорректная строка в файле результатов: {res}");
                        return null;
                    }

                    string username = parts[0];
                    if (!int.TryParse(parts[1], out int correctAnswers))
                    {
                        Console.WriteLine($"Некорректное количество правильных ответов в строке: {res}");
                        return null;
                    }

                    if (!DateTime.TryParse(parts[2], out DateTime dateTime))
                    {
                        Console.WriteLine($"Некорректная дата в строке: {res}");
                        return null;
                    }

                    return new { username, correctAnswers, dateTime };
                }).Where(result => result != null).ToList();

                var sortedResults = parsedResults
                    .OrderByDescending(res => res.correctAnswers)
                    .ThenByDescending(res => res.dateTime)
                    .ToList();

                int userRank = 1;
                foreach (var result in sortedResults)
                {
                    if (result.username == userName)
                    {
                        return userRank;
                    }
                    userRank++;
                }

                return -1;
            }
        }

        static void Main(string[] args)
        {
            ExFile();

            string[] login =
               {
                "Войти",
                "Зарегистрироваться",
                "Выход"
                };
            int loginIndex = 0;

            var loginManager = new Login();
            int userIndex = -1;

            while (true)
            {
                DrawMenu(login, loginIndex);
                var key = Console.ReadKey(true).Key;
                if (key == ConsoleKey.Enter)
                {
                    Console.Clear();

                    switch (loginIndex)
                    {
                        case 0:
                            if (loginManager.CheckLogin(out userIndex))
                            {
                                Console.WriteLine("Успешный вход!");
                                MainMenu(userIndex);
                            }
                            else
                            {
                                Console.WriteLine("Неверный логин или пароль!");
                            }
                            break;
                        case 1:
                            loginManager.GetLogin();
                            break;
                        case 2:
                            return;
                    }
                }
                switch (key)
                {
                    case ConsoleKey.DownArrow:
                        if (loginIndex < login.Length - 1) loginIndex++;
                        break;
                    case ConsoleKey.UpArrow:
                        if (loginIndex > 0) loginIndex--;
                        break;
                }
            }


        }
        public static void MainMenu(int userIndex)
        {
            string userName;
            Login login = new Login();
            login.CheckUserName(out userName);
            string[] menu = {
        "стартовать новую викторину",
        "посмотреть результаты своих прошлых викторин",
        "посмотреть Топ-20 по конкретной викторине",
        "изменить настройки",
        "выход"
    };

            int menuIndex = 0;
            while (true)
            {
                DrawMenu(menu, menuIndex);
                var key = Console.ReadKey(true).Key;
                if (key == ConsoleKey.Enter)
                {
                    Console.Clear();

                    switch (menuIndex)
                    {
                        case 0:
                            var viktorina = new Viktorina();
                            ViktorinMenu(userName);
                            break;
                        case 1:
                            Result res = new Result(userName);
                            res.MainResult();
                            break;
                        case 2:
                            Top top = new Top();
                            top.Top20();
                            int userRank = top.Plase(userName);
                            if (userRank != -1)
                            {
                                Console.WriteLine($"Ваше место: {userRank}");
                                Console.ReadLine();
                            }
                            else
                            {
                                Console.WriteLine("Вашего имени нет в списке.");
                                Console.ReadLine();
                            }
                            break;
                        case 3:
                            ChangeMenu(userIndex);
                            break;
                        case 4:
                            return;
                    }
                }
                switch (key)
                {
                    case ConsoleKey.DownArrow:
                        if (menuIndex < menu.Length - 1) menuIndex++;
                        break;
                    case ConsoleKey.UpArrow:
                        if (menuIndex > 0) menuIndex--;
                        break;
                }
            }
        }
        public static void DrawMenu(string[] list, int index)
        {
            Console.Clear();
            for (int i = 0; i < list.Length; i++)
            {
                if (i == index)
                {
                    Console.BackgroundColor = Console.ForegroundColor;
                    Console.ForegroundColor = ConsoleColor.Black;
                }
                Console.WriteLine(list[i]);
                Console.ResetColor();
            }
        }

        public static void ViktorinMenu(string userName)
        {
            Console.WriteLine("Выбирете тему: ");
            var viktorina = new Viktorina();
            string[] list = {
        "История",
        "География",
        "Биология",
        "Создание и редактирование викторин",
        "Назад"
    };

            int index = 0;
            DrawMenu(list, index);
            while (true)
            {
                var key = Console.ReadKey(true).Key;

                switch (key)
                {
                    case ConsoleKey.Enter:
                        Console.Clear();
                        switch (index)
                        {
                            case 0:
                                viktorina.LoadQuiz(Login.history);
                                viktorina.Start(userName);
                                break;
                            case 1:
                                viktorina.LoadQuiz(Login.geography);
                                viktorina.Start(userName);
                                break;
                            case 2:
                                viktorina.LoadQuiz(Login.biology);
                                viktorina.Start(userName);
                                break;
                            case 3:
                                ViktorinAdminMenu();
                                break;
                            case 4:
                                return;
                        }
                        return;
                    case ConsoleKey.DownArrow:
                        if (index < list.Length - 1) index++;
                        else index = 0;
                        DrawMenu(list, index);
                        break;
                    case ConsoleKey.UpArrow:
                        if (index > 0) index--;
                        else index = list.Length - 1;
                        DrawMenu(list, index);
                        break;
                }
            }
        }
        public static void ChangeMenu(int userIndex)
        {
            Login login = new Login();
            string[] change =
            {
                "Сменить пароль",
                "Сменить дату",
                "Назад"
            };

            int changeIndex = 0;
            DrawMenu(change, changeIndex);
            while (true)
            {
                var key = Console.ReadKey(true).Key;

                switch (key)
                {
                    case ConsoleKey.Enter:
                        Console.Clear();
                        switch (changeIndex)
                        {
                            case 0:
                                login.ChangePassword(userIndex);
                                break;
                            case 1:
                                login.ChangeDate(userIndex);
                                break;
                            case 2:
                                return;
                        }
                        return;
                    case ConsoleKey.DownArrow:
                        if (changeIndex < change.Length - 1) changeIndex++;
                        else changeIndex = 0;
                        DrawMenu(change, changeIndex);
                        break;
                    case ConsoleKey.UpArrow:
                        if (changeIndex > 0) changeIndex--;
                        else changeIndex = change.Length - 1;
                        DrawMenu(change, changeIndex);
                        break;
                }
            }
        }
        public static string ExFile()
        {
            // Определение путей к файлам
            string logpath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "login.txt");
            string historypath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "История.txt");
            string biologypath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Биология.txt");
            string geopath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "География.txt");
            string paspath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "password.txt");
            string datapath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "date.txt");
            string respath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "results.txt");
            string uspath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "user.txt");

            // Логин
            if (!File.Exists(logpath))
            {
                using (FileStream fs = File.Create(logpath)) { }
            }
            Login.lpath = logpath;

            // История
            if (!File.Exists(historypath))
            {
                using (FileStream fs = File.Create(historypath)) { }
            }
            Login.history = historypath;

            // Биология
            if (!File.Exists(biologypath))
            {
                using (FileStream fs = File.Create(biologypath)) { }
            }
            Login.biology = biologypath;

            // География
            if (!File.Exists(geopath))
            {
                using (FileStream fs = File.Create(geopath)) { }
            }
            Login.geography = geopath;

            // Пароль
            if (!File.Exists(paspath))
            {
                using (FileStream fs = File.Create(paspath)) { }
            }
            Login.passpath = paspath;

            // Дата
            if (!File.Exists(datapath))
            {
                using (FileStream fs = File.Create(datapath)) { }
            }
            Login.datepath = datapath;

            // Пользователи
            if (!File.Exists(uspath))
            {
                using (FileStream fs = File.Create(uspath)) { }
            }
            Login.userpath = uspath;

            // Результаты
            if (!File.Exists(respath))
            {
                using (FileStream fs = File.Create(respath)) { }
            }
            Login.results = respath;

            return null;
        }

        public static void ViktorinAdminMenu()
        {
            var viktorina = new Viktorina();
            string[] list = {
        "Создать викторину",
        "Редактировать викторину",
        "Назад"
    };

            int index = 0;
            DrawMenu(list, index);
            while (true)
            {
                var key = Console.ReadKey(true).Key;

                switch (key)
                {
                    case ConsoleKey.Enter:
                        Console.Clear();
                        switch (index)
                        {
                            case 0:
                                Console.WriteLine("Выберите тему для создания викторины: ");
                                string[] topics = { "История", "География", "Биология" };
                                int topicIndex = 0;
                                DrawMenu(topics, topicIndex);
                                while (true)
                                {
                                    var topicKey = Console.ReadKey(true).Key;
                                    switch (topicKey)
                                    {
                                        case ConsoleKey.Enter:
                                            Console.Clear();
                                           
                                            viktorina.CreateQuiz(AppDomain.CurrentDomain.BaseDirectory + "\\" + topics[topicIndex] + ".txt");
                                            return;
                                        case ConsoleKey.DownArrow:
                                            if (topicIndex < topics.Length - 1) topicIndex++;
                                            else topicIndex = 0;
                                            DrawMenu(topics, topicIndex);
                                            break;
                                        case ConsoleKey.UpArrow:
                                            if (topicIndex > 0) topicIndex--;
                                            else topicIndex = topics.Length - 1;
                                            DrawMenu(topics, topicIndex);
                                            break;
                                    }
                                }
                            case 1:
                                Console.WriteLine("Выберите тему для редактирования викторины: ");
                                string[] editTopics = { "История", "География", "Биология" };
                                int editTopicIndex = 0;
                                DrawMenu(editTopics, editTopicIndex);
                                while (true)
                                {
                                    var editKey = Console.ReadKey(true).Key;
                                    switch (editKey)
                                    {
                                        case ConsoleKey.Enter:
                                            Console.Clear();
                                            viktorina.EditQuiz(AppDomain.CurrentDomain.BaseDirectory + "\\" + editTopics[editTopicIndex] + ".txt");
                                            return;
                                        case ConsoleKey.DownArrow:
                                            if (editTopicIndex < editTopics.Length - 1) editTopicIndex++;
                                            else editTopicIndex = 0;
                                            DrawMenu(editTopics, editTopicIndex);
                                            break;
                                        case ConsoleKey.UpArrow:
                                            if (editTopicIndex > 0) editTopicIndex--;
                                            else editTopicIndex = editTopics.Length - 1;
                                            DrawMenu(editTopics, editTopicIndex);
                                            break;
                                    }
                                }
                            case 2:
                                return;
                        }
                        break;
                    case ConsoleKey.DownArrow:
                        if (index < list.Length - 1) index++;
                        else index = 0;
                        DrawMenu(list, index);
                        break;
                    case ConsoleKey.UpArrow:
                        if (index > 0) index--;
                        else index = list.Length - 1;
                        DrawMenu(list, index);
                        break;
                }
            }

        }
    }
}
